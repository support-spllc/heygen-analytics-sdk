!function(window) {
  // Configuration - clients will replace these values
  const config = {
    apiToken: "YTJhOTM3NDNlOTYyNDVhNGE0OWNkOTg0YzliYTJhYzctMTc0Mzk4NjEyNw==", // Client replaces this
    analyticsEndpoint: "/.netlify/functions/log", // Your backend URL
    clientId: window.heygenClientId || ("client_" + Math.random().toString(36).substr(2, 9)),
    avatarName: "d0498c23d9154c4da2d899af45924fe2", // Client's avatar
    quality: "medium",
    debug: false
  };

  // Analytics tracking class (embedded)
  class HeyGenAnalyticsAvatar {
    constructor(cfg) {
      this.config = cfg;
      this.avatar = null;
      this.sessionData = {
        sessionId: null,
        startTime: null,
        endTime: null,
        interactions: [],
        errors: [],
        metadata: {
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString(),
          clientId: cfg.clientId,
          url: window.location.href
        }
      };
      this.isSessionActive = false;
      this.loadSDK();
    }

    async loadSDK() {
      if (window.StreamingAvatar) {
        this.initAvatar();
        return;
      }
      
      const script = document.createElement("script");
      script.src = "https://cdn.jsdelivr.net/npm/@heygen/streaming-avatar@latest/dist/heygen-avatar.umd.js";
      script.onload = () => this.initAvatar();
      script.onerror = () => this.trackError("sdk_load_failed", new Error("Failed to load HeyGen SDK"));
      document.head.appendChild(script);
    }

    initAvatar() {
      try {
        this.avatar = new window.StreamingAvatar({ token: this.config.apiToken });
        this.setupEventListeners();
        this.log("Avatar SDK loaded successfully");
      } catch (error) {
        this.trackError("avatar_init_failed", error);
      }
    }

    setupEventListeners() {
      if (!this.avatar) return;
      
      this.avatar.on("avatar_start_talking", () => {
        this.trackEvent("avatar_start_talking", { timestamp: Date.now() });
      });
      
      this.avatar.on("avatar_stop_talking", () => {
        this.trackEvent("avatar_stop_talking", { timestamp: Date.now() });
      });
      
      this.avatar.on("stream_ready", () => {
        this.trackEvent("stream_ready", { timestamp: Date.now() });
      });
      
      this.avatar.on("stream_disconnected", (event) => {
        this.trackEvent("stream_disconnected", { 
          timestamp: Date.now(), 
          reason: event?.reason 
        });
      });
    }

    async startSession() {
      if (!this.avatar) throw new Error("Avatar SDK not loaded");
      
      try {
        this.sessionData.startTime = Date.now();
        
        const sessionResult = await this.avatar.createStartAvatar({
          avatarName: this.config.avatarName,
          quality: this.config.quality
        });
        
        this.sessionData.sessionId = sessionResult.session_id;
        this.isSessionActive = true;
        
        this.trackEvent("session_started", {
          sessionId: sessionResult.session_id,
          avatarName: this.config.avatarName,
          quality: this.config.quality
        });
        
        return sessionResult;
      } catch (error) {
        this.trackError("session_start_failed", error);
        throw error;
      }
    }

    async speak(text, options = {}) {
      if (!this.isSessionActive) throw new Error("Session not active");
      
      const startTime = Date.now();
      
      try {
        const result = await this.avatar.speak({
          sessionId: this.sessionData.sessionId,
          text: text,
          task_type: options.taskType || "REPEAT"
        });
        
        const responseTime = Date.now() - startTime;
        
        this.trackInteraction({
          type: "user_message",
          text: text,
          timestamp: startTime,
          responseTime: responseTime,
          success: true
        });
        
        return result;
      } catch (error) {
        this.trackError("speak_failed", error, { text, options });
        throw error;
      }
    }

    async endSession() {
      if (!this.isSessionActive) return;
      
      try {
        this.sessionData.endTime = Date.now();
        const duration = this.sessionData.endTime - this.sessionData.startTime;
        
        const metrics = this.calculateMetrics(duration);
        
        await this.sendAnalytics("session_complete", {
          ...this.sessionData,
          duration: duration,
          metrics: metrics
        });
        
        if (this.avatar && this.avatar.stopAvatar) {
          await this.avatar.stopAvatar();
        }
        
        this.isSessionActive = false;
      } catch (error) {
        this.trackError("session_end_failed", error);
      }
    }

    calculateMetrics(duration) {
      const interactions = this.sessionData.interactions.filter(i => i.type === "user_message");
      const errors = this.sessionData.errors;
      
      return {
        totalDuration: duration,
        totalInteractions: interactions.length,
        totalErrors: errors.length,
        avgResponseTime: interactions.length > 0 ? 
          interactions.reduce((sum, i) => sum + (i.responseTime || 0), 0) / interactions.length : 0,
        errorRate: interactions.length > 0 ? errors.length / interactions.length : 0
      };
    }

    trackInteraction(interaction) {
      this.sessionData.interactions.push({
        ...interaction,
        timestamp: interaction.timestamp || Date.now()
      });
      this.sendAnalytics("interaction", interaction);
    }

    trackEvent(eventType, eventData) {
      const event = {
        type: eventType,
        data: eventData,
        timestamp: Date.now()
      };
      this.sessionData.interactions.push(event);
      this.sendAnalytics("event", event);
    }

    trackError(errorType, error, context = {}) {
      const errorData = {
        type: errorType,
        message: error.message,
        stack: error.stack,
        context: context,
        timestamp: Date.now()
      };
      this.sessionData.errors.push(errorData);
      this.sendAnalytics("error", errorData);
    }

    async sendAnalytics(type, data) {
      try {
        const payload = {
          clientId: this.config.clientId,
          sessionId: this.sessionData.sessionId,
          type: type,
          data: data,
          metadata: this.sessionData.metadata
        };
        
        await fetch(this.config.analyticsEndpoint, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
      } catch (error) {
        this.log("Analytics failed:", error);
      }
    }

    log(...args) {
      if (this.config.debug) {
        console.log("[HeyGen Analytics]", ...args);
      }
    }
  }

  // Create global instance
  window.heygenAnalytics = new HeyGenAnalyticsAvatar(config);

  // Auto-cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (window.heygenAnalytics && window.heygenAnalytics.isSessionActive) {
      navigator.sendBeacon(
        config.analyticsEndpoint,
        JSON.stringify({
          type: "session_abandoned",
          sessionId: window.heygenAnalytics.sessionData.sessionId,
          clientId: config.clientId,
          duration: Date.now() - window.heygenAnalytics.sessionData.startTime
        })
      );
    }
  });

  // Simplified API for clients
  window.HeyGenAnalytics = {
    // Start a session
    start: () => window.heygenAnalytics.startSession(),
    
    // Send message to avatar
    speak: (text, options) => window.heygenAnalytics.speak(text, options),
    
    // End session
    end: () => window.heygenAnalytics.endSession(),
    
    // Check if session is active
    isActive: () => window.heygenAnalytics.isSessionActive,
    
    // Get current session stats
    getStats: () => {
      const analytics = window.heygenAnalytics;
      if (!analytics.isSessionActive) return null;
      
      const duration = Date.now() - analytics.sessionData.startTime;
      return {
        sessionId: analytics.sessionData.sessionId,
        duration: Math.round(duration / 1000),
        interactions: analytics.sessionData.interactions.filter(i => i.type === "user_message").length,
        errors: analytics.sessionData.errors.length,
        isActive: analytics.isSessionActive
      };
    }
  };

  // Auto-initialize message
  console.log("ðŸ¤– HeyGen Analytics SDK loaded. Use window.HeyGenAnalytics to interact with your avatar.");

}(globalThis);